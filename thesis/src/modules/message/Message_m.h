//
// Generated file, do not edit! Created by nedtool 5.6 from veins/modules/application/traci/Thesis/Message.msg.
//

#ifndef __VEINS_MESSAGE_M_H
#define __VEINS_MESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif


namespace veins {

class Message;
} // namespace veins

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress

// cplusplus {{
    #include <deque>
    typedef std::deque<long> Deque;
// }}

/**
 * Enum generated from <tt>veins/modules/application/traci/Thesis/Message.msg:14</tt> by nedtool.
 * <pre>
 * enum MessageType
 * {
 *     BROADCAST = 0;
 *     REQUEST = 1;
 *     REPLY = 2;
 *     ROUTE_REQ = 3;
 *     ROUTE_REPLY = 4;
 *     CENTRALITY_REQ = 5;
 *     CENTRALITY_REPLY = 6;
 *     ACKNOWLEDGEMENT = 7;
 *     ORIGIN_INIT_REQ = 8;
 *     ORIGIN_INIT_REPLY = 9;
 *     RSU_INIT_REQ = 10;
 *     RSU_INIT_REPLY = 11;
 *     PULL_REQ = 12;
 *     PULL_REPLY = 13;
 *     PUSH_CENTRALITY = 14;
 *     PUSH_ML = 15;
 *     PUSH_CONTENT = 16;
 *     ORIGIN_CENTRALITY_REQ = 17;
 *     ORIGIN_CENTRALITY_REPLY = 18;
 * }
 * </pre>
 */
enum MessageType {
    BROADCAST = 0,
    REQUEST = 1,
    REPLY = 2,
    ROUTE_REQ = 3,
    ROUTE_REPLY = 4,
    CENTRALITY_REQ = 5,
    CENTRALITY_REPLY = 6,
    ACKNOWLEDGEMENT = 7,
    ORIGIN_INIT_REQ = 8,
    ORIGIN_INIT_REPLY = 9,
    RSU_INIT_REQ = 10,
    RSU_INIT_REPLY = 11,
    PULL_REQ = 12,
    PULL_REPLY = 13,
    PUSH_CENTRALITY = 14,
    PUSH_ML = 15,
    PUSH_CONTENT = 16,
    ORIGIN_CENTRALITY_REQ = 17,
    ORIGIN_CENTRALITY_REPLY = 18
};

/**
 * Enum generated from <tt>veins/modules/application/traci/Thesis/Message.msg:37</tt> by nedtool.
 * <pre>
 * enum CurrentState
 * {
 *     INITIALIZING = 0;
 *     SENDING = 1;
 *     REQUESTING = 2;
 *     REPEATING = 3;
 *     COLLECTING = 4;
 *     CACHING = 5;
 *     WRITING = 6;
 *     EXTRACTING = 7;
 * }
 * </pre>
 */
enum CurrentState {
    INITIALIZING = 0,
    SENDING = 1,
    REQUESTING = 2,
    REPEATING = 3,
    COLLECTING = 4,
    CACHING = 5,
    WRITING = 6,
    EXTRACTING = 7
};

/**
 * Enum generated from <tt>veins/modules/application/traci/Thesis/Message.msg:49</tt> by nedtool.
 * <pre>
 * enum CentralityType
 * {
 *     DEGREE = 0;
 *     CLOSENESS = 1;
 *     BETWEENNESS = 2;
 * }
 * </pre>
 */
enum CentralityType {
    DEGREE = 0,
    CLOSENESS = 1,
    BETWEENNESS = 2
};


namespace veins {

/**
 * Class generated from <tt>veins/modules/application/traci/Thesis/Message.msg:58</tt> by nedtool.
 * <pre>
 * packet Message extends BaseFrame1609_4
 * {
 *     LAddress::L2Type msgId;
 * 
 *     // Message identifiers
 *     LAddress::L2Type senderAddress = -1;
 *     LAddress::L2Type recipient = -1;
 *     LAddress::L2Type source;
 *     LAddress::L2Type dest;
 *     Coord senderPosition;
 * 
 *     Coord initPosition;
 * 
 *     // Message properties
 *     MessageType type = MessageType::BROADCAST;
 *     CurrentState state = CurrentState::SENDING;
 *     CentralityType centrality;
 *     // Variables used for origin transmission
 *     bool originMessage = false;
 *     bool updatePaths = true;
 *     // Variables used for message transmission
 *     int hops = 0;
 *     int maxHops = 2;
 *     // Message data
 *     float msgInfo = 0;
 *     simtime_t ackInfo;
 *     simtime_t msgTime;
 * 
 *     // Route variables
 *     Deque route;
 *     Deque previousNodes;
 *     // Content variables
 *     string contentId = "";
 *     string content = "";
 *     int segments = 1;
 *     int segmentNumber = 1;
 *     bool multimedia = false;
 * }
 * </pre>
 */
class VEINS_API Message : public ::veins::BaseFrame1609_4
{
  protected:
    LAddress::L2Type msgId;
    LAddress::L2Type senderAddress = -1;
    LAddress::L2Type recipient = -1;
    LAddress::L2Type source;
    LAddress::L2Type dest;
    Coord senderPosition;
    Coord initPosition;
    MessageType type = MessageType::BROADCAST;
    CurrentState state = CurrentState::SENDING;
    CentralityType centrality = static_cast<CentralityType>(-1);
    bool originMessage = false;
    bool updatePaths = true;
    int hops = 0;
    int maxHops = 2;
    float msgInfo = 0;
    omnetpp::simtime_t ackInfo = SIMTIME_ZERO;
    omnetpp::simtime_t msgTime = SIMTIME_ZERO;
    Deque route;
    Deque previousNodes;
    omnetpp::opp_string contentId = "";
    omnetpp::opp_string content = "";
    int segments = 1;
    int segmentNumber = 1;
    bool multimedia = false;

  private:
    void copy(const Message& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Message&);

  public:
    Message(const char *name=nullptr, short kind=0);
    Message(const Message& other);
    virtual ~Message();
    Message& operator=(const Message& other);
    virtual Message *dup() const override {return new Message(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const LAddress::L2Type& getMsgId() const;
    virtual LAddress::L2Type& getMsgIdForUpdate() { return const_cast<LAddress::L2Type&>(const_cast<Message*>(this)->getMsgId());}
    virtual void setMsgId(const LAddress::L2Type& msgId);
    virtual const LAddress::L2Type& getSenderAddress() const;
    virtual LAddress::L2Type& getSenderAddressForUpdate() { return const_cast<LAddress::L2Type&>(const_cast<Message*>(this)->getSenderAddress());}
    virtual void setSenderAddress(const LAddress::L2Type& senderAddress);
    virtual const LAddress::L2Type& getRecipient() const;
    virtual LAddress::L2Type& getRecipientForUpdate() { return const_cast<LAddress::L2Type&>(const_cast<Message*>(this)->getRecipient());}
    virtual void setRecipient(const LAddress::L2Type& recipient);
    virtual const LAddress::L2Type& getSource() const;
    virtual LAddress::L2Type& getSourceForUpdate() { return const_cast<LAddress::L2Type&>(const_cast<Message*>(this)->getSource());}
    virtual void setSource(const LAddress::L2Type& source);
    virtual const LAddress::L2Type& getDest() const;
    virtual LAddress::L2Type& getDestForUpdate() { return const_cast<LAddress::L2Type&>(const_cast<Message*>(this)->getDest());}
    virtual void setDest(const LAddress::L2Type& dest);
    virtual const Coord& getSenderPosition() const;
    virtual Coord& getSenderPositionForUpdate() { return const_cast<Coord&>(const_cast<Message*>(this)->getSenderPosition());}
    virtual void setSenderPosition(const Coord& senderPosition);
    virtual const Coord& getInitPosition() const;
    virtual Coord& getInitPositionForUpdate() { return const_cast<Coord&>(const_cast<Message*>(this)->getInitPosition());}
    virtual void setInitPosition(const Coord& initPosition);
    virtual MessageType getType() const;
    virtual void setType(MessageType type);
    virtual CurrentState getState() const;
    virtual void setState(CurrentState state);
    virtual CentralityType getCentrality() const;
    virtual void setCentrality(CentralityType centrality);
    virtual bool getOriginMessage() const;
    virtual void setOriginMessage(bool originMessage);
    virtual bool getUpdatePaths() const;
    virtual void setUpdatePaths(bool updatePaths);
    virtual int getHops() const;
    virtual void setHops(int hops);
    virtual int getMaxHops() const;
    virtual void setMaxHops(int maxHops);
    virtual float getMsgInfo() const;
    virtual void setMsgInfo(float msgInfo);
    virtual omnetpp::simtime_t getAckInfo() const;
    virtual void setAckInfo(omnetpp::simtime_t ackInfo);
    virtual omnetpp::simtime_t getMsgTime() const;
    virtual void setMsgTime(omnetpp::simtime_t msgTime);
    virtual const Deque& getRoute() const;
    virtual Deque& getRouteForUpdate() { return const_cast<Deque&>(const_cast<Message*>(this)->getRoute());}
    virtual void setRoute(const Deque& route);
    virtual const Deque& getPreviousNodes() const;
    virtual Deque& getPreviousNodesForUpdate() { return const_cast<Deque&>(const_cast<Message*>(this)->getPreviousNodes());}
    virtual void setPreviousNodes(const Deque& previousNodes);
    virtual const char * getContentId() const;
    virtual void setContentId(const char * contentId);
    virtual const char * getContent() const;
    virtual void setContent(const char * content);
    virtual int getSegments() const;
    virtual void setSegments(int segments);
    virtual int getSegmentNumber() const;
    virtual void setSegmentNumber(int segmentNumber);
    virtual bool getMultimedia() const;
    virtual void setMultimedia(bool multimedia);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Message& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Message& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_MESSAGE_M_H

