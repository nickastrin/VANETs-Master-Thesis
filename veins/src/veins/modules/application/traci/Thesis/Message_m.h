//
// Generated file, do not edit! Created by nedtool 5.6 from veins/modules/application/traci/Thesis/Message.msg.
//

#ifndef __VEINS_MESSAGE_M_H
#define __VEINS_MESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif


namespace veins {

class Message;
} // namespace veins

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress

// cplusplus {{
    #include <vector>
    typedef std::vector<long> Vector;
// }}

/**
 * Enum generated from <tt>veins/modules/application/traci/Thesis/Message.msg:14</tt> by nedtool.
 * <pre>
 * enum MessageType
 * {
 *     HELLO = 0;
 *     BROADCAST = 1;
 *     REQUEST = 2;
 *     REPLY = 3;
 *     ROUTE_REQ = 4;
 *     ROUTE_REPLY = 5;
 *     CENTRALITY_REQ = 6;
 *     CENTRALITY_REPLY = 7;
 *     ACKNOWLEDGEMENT = 8;
 * }
 * </pre>
 */
enum MessageType {
    HELLO = 0,
    BROADCAST = 1,
    REQUEST = 2,
    REPLY = 3,
    ROUTE_REQ = 4,
    ROUTE_REPLY = 5,
    CENTRALITY_REQ = 6,
    CENTRALITY_REPLY = 7,
    ACKNOWLEDGEMENT = 8
};

/**
 * Enum generated from <tt>veins/modules/application/traci/Thesis/Message.msg:27</tt> by nedtool.
 * <pre>
 * enum CurrentState
 * {
 *     INITIALIZING = 0;
 *     SENDING = 1;
 *     REQUESTING = 2;
 *     REPEATING = 3;
 *     COLLECTING = 4;
 *     CACHING = 5;
 * }
 * </pre>
 */
enum CurrentState {
    INITIALIZING = 0,
    SENDING = 1,
    REQUESTING = 2,
    REPEATING = 3,
    COLLECTING = 4,
    CACHING = 5
};

/**
 * Enum generated from <tt>veins/modules/application/traci/Thesis/Message.msg:37</tt> by nedtool.
 * <pre>
 * enum CentralityType
 * {
 *     DEGREE = 0;
 *     CLOSENESS = 1;
 *     BETWEENNESS = 2;
 * }
 * </pre>
 */
enum CentralityType {
    DEGREE = 0,
    CLOSENESS = 1,
    BETWEENNESS = 2
};


namespace veins {

/**
 * Class generated from <tt>veins/modules/application/traci/Thesis/Message.msg:46</tt> by nedtool.
 * <pre>
 * packet Message extends BaseFrame1609_4
 * {
 *     long msgId;                 // Message Id
 * 
 *     // Sender variables
 *     LAddress::L2Type senderAddress = -1;
 *     Coord senderPosition;
 * 
 *     // Message route variables
 *     LAddress::L2Type source;
 *     LAddress::L2Type dest;
 * 
 *     // Message properties
 *     int ttl = 1;                // Time to live, default value 1
 *     int hops = 0;               // Hops, initialized at 0
 * 
 *     // Message specifications
 *     MessageType type = MessageType::BROADCAST;
 *     CurrentState state = CurrentState::SENDING;
 *     CentralityType centrality;
 * 
 * 
 *     // Message data
 *     string roadData;            // Information about road
 *     int msgInfo = 0;            // Misc message info
 *     simtime_t ackInfo;
 * 
 *     // Route variables
 *     Vector route;               // Route taken
 *     Vector rsuRoute;            // Rsus in the route, used for betweenness
 *     Vector previousNodes;       // Used for acknowledgements
 * }
 * </pre>
 */
class VEINS_API Message : public ::veins::BaseFrame1609_4
{
  protected:
    long msgId = 0;
    LAddress::L2Type senderAddress = -1;
    Coord senderPosition;
    LAddress::L2Type source;
    LAddress::L2Type dest;
    int ttl = 1;
    int hops = 0;
    MessageType type = MessageType::BROADCAST;
    CurrentState state = CurrentState::SENDING;
    CentralityType centrality = static_cast<CentralityType>(-1);
    omnetpp::opp_string roadData;
    int msgInfo = 0;
    omnetpp::simtime_t ackInfo = SIMTIME_ZERO;
    Vector route;
    Vector rsuRoute;
    Vector previousNodes;

  private:
    void copy(const Message& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Message&);

  public:
    Message(const char *name=nullptr, short kind=0);
    Message(const Message& other);
    virtual ~Message();
    Message& operator=(const Message& other);
    virtual Message *dup() const override {return new Message(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual long getMsgId() const;
    virtual void setMsgId(long msgId);
    virtual const LAddress::L2Type& getSenderAddress() const;
    virtual LAddress::L2Type& getSenderAddressForUpdate() { return const_cast<LAddress::L2Type&>(const_cast<Message*>(this)->getSenderAddress());}
    virtual void setSenderAddress(const LAddress::L2Type& senderAddress);
    virtual const Coord& getSenderPosition() const;
    virtual Coord& getSenderPositionForUpdate() { return const_cast<Coord&>(const_cast<Message*>(this)->getSenderPosition());}
    virtual void setSenderPosition(const Coord& senderPosition);
    virtual const LAddress::L2Type& getSource() const;
    virtual LAddress::L2Type& getSourceForUpdate() { return const_cast<LAddress::L2Type&>(const_cast<Message*>(this)->getSource());}
    virtual void setSource(const LAddress::L2Type& source);
    virtual const LAddress::L2Type& getDest() const;
    virtual LAddress::L2Type& getDestForUpdate() { return const_cast<LAddress::L2Type&>(const_cast<Message*>(this)->getDest());}
    virtual void setDest(const LAddress::L2Type& dest);
    virtual int getTtl() const;
    virtual void setTtl(int ttl);
    virtual int getHops() const;
    virtual void setHops(int hops);
    virtual MessageType getType() const;
    virtual void setType(MessageType type);
    virtual CurrentState getState() const;
    virtual void setState(CurrentState state);
    virtual CentralityType getCentrality() const;
    virtual void setCentrality(CentralityType centrality);
    virtual const char * getRoadData() const;
    virtual void setRoadData(const char * roadData);
    virtual int getMsgInfo() const;
    virtual void setMsgInfo(int msgInfo);
    virtual omnetpp::simtime_t getAckInfo() const;
    virtual void setAckInfo(omnetpp::simtime_t ackInfo);
    virtual const Vector& getRoute() const;
    virtual Vector& getRouteForUpdate() { return const_cast<Vector&>(const_cast<Message*>(this)->getRoute());}
    virtual void setRoute(const Vector& route);
    virtual const Vector& getRsuRoute() const;
    virtual Vector& getRsuRouteForUpdate() { return const_cast<Vector&>(const_cast<Message*>(this)->getRsuRoute());}
    virtual void setRsuRoute(const Vector& rsuRoute);
    virtual const Vector& getPreviousNodes() const;
    virtual Vector& getPreviousNodesForUpdate() { return const_cast<Vector&>(const_cast<Message*>(this)->getPreviousNodes());}
    virtual void setPreviousNodes(const Vector& previousNodes);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Message& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Message& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_MESSAGE_M_H

