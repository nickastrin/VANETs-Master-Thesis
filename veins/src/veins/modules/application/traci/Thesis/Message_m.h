//
// Generated file, do not edit! Created by nedtool 5.6 from veins/modules/application/traci/Thesis/Message.msg.
//

#ifndef __VEINS_MESSAGE_M_H
#define __VEINS_MESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif


namespace veins {

class Message;
} // namespace veins

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress

// cplusplus {{
    #include <list>

    typedef std::list<long> SearchFront;
// }}


namespace veins {

/**
 * Enum generated from <tt>veins/modules/application/traci/Thesis/Message.msg:17</tt> by nedtool.
 * <pre>
 * enum messageType
 * {
 *     BROADCAST = 0;
 *     REQUEST = 1;
 *     REPLY = 2;
 *     RSU_CHECK = 3;
 *     RSU_REPLY = 4;
 * }
 * </pre>
 */
enum messageType {
    BROADCAST = 0,
    REQUEST = 1,
    REPLY = 2,
    RSU_CHECK = 3,
    RSU_REPLY = 4
};

/**
 * Enum generated from <tt>veins/modules/application/traci/Thesis/Message.msg:26</tt> by nedtool.
 * <pre>
 * enum centralityType
 * {
 *     NONE = 0;
 *     DEGREE = 1;
 *     CLOSENESS = 2;
 *     BETWEENNESS = 3;
 * }
 * </pre>
 */
enum centralityType {
    NONE = 0,
    DEGREE = 1,
    CLOSENESS = 2,
    BETWEENNESS = 3
};

/**
 * Enum generated from <tt>veins/modules/application/traci/Thesis/Message.msg:34</tt> by nedtool.
 * <pre>
 * enum messageStage
 * {
 *     INITIALIZING = 0;
 *     SENDING = 1;
 *     COLLECTING = 2;
 * }
 * </pre>
 */
enum messageStage {
    INITIALIZING = 0,
    SENDING = 1,
    COLLECTING = 2
};

/**
 * Class generated from <tt>veins/modules/application/traci/Thesis/Message.msg:41</tt> by nedtool.
 * <pre>
 * packet Message extends BaseFrame1609_4
 * {
 *     // Message data
 *     string messageData = "";
 * 
 *     // Message TTL
 *     int hopCount = 0;
 *     int maxHops = 2;
 * 
 *     SearchFront searchFront;
 * 
 *     // Address of sender. Default is broadcast
 *     LAddress::L2Type senderAddress = -1;
 * 
 *     // Define message type. Default is broadcast
 *     messageType type = messageType::BROADCAST;
 *     // Define centrality type for centrality calculations. Default is none
 *     centralityType centrality = centralityType::NONE;
 *     // Define message stage. Used for collecting and initializing during selfMessage
 *     messageStage stage = messageStage::SENDING;
 * 
 *     // Coordinates of the sender
 *     Coord senderPosition;
 * }
 * </pre>
 */
class VEINS_API Message : public ::veins::BaseFrame1609_4
{
  protected:
    omnetpp::opp_string messageData = "";
    int hopCount = 0;
    int maxHops = 2;
    SearchFront searchFront;
    LAddress::L2Type senderAddress = -1;
    veins::messageType type = messageType::BROADCAST;
    veins::centralityType centrality = centralityType::NONE;
    veins::messageStage stage = messageStage::SENDING;
    Coord senderPosition;

  private:
    void copy(const Message& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Message&);

  public:
    Message(const char *name=nullptr, short kind=0);
    Message(const Message& other);
    virtual ~Message();
    Message& operator=(const Message& other);
    virtual Message *dup() const override {return new Message(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getMessageData() const;
    virtual void setMessageData(const char * messageData);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual int getMaxHops() const;
    virtual void setMaxHops(int maxHops);
    virtual const SearchFront& getSearchFront() const;
    virtual SearchFront& getSearchFrontForUpdate() { return const_cast<SearchFront&>(const_cast<Message*>(this)->getSearchFront());}
    virtual void setSearchFront(const SearchFront& searchFront);
    virtual const LAddress::L2Type& getSenderAddress() const;
    virtual LAddress::L2Type& getSenderAddressForUpdate() { return const_cast<LAddress::L2Type&>(const_cast<Message*>(this)->getSenderAddress());}
    virtual void setSenderAddress(const LAddress::L2Type& senderAddress);
    virtual veins::messageType getType() const;
    virtual void setType(veins::messageType type);
    virtual veins::centralityType getCentrality() const;
    virtual void setCentrality(veins::centralityType centrality);
    virtual veins::messageStage getStage() const;
    virtual void setStage(veins::messageStage stage);
    virtual const Coord& getSenderPosition() const;
    virtual Coord& getSenderPositionForUpdate() { return const_cast<Coord&>(const_cast<Message*>(this)->getSenderPosition());}
    virtual void setSenderPosition(const Coord& senderPosition);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Message& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Message& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_MESSAGE_M_H

